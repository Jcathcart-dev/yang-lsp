apply from: "${rootDir}/gradle/distribution.gradle"

ext.title = 'Yang Language'
description = 'Language infrastructure for Yang based on Xtext'

configurations {
	mwe2 {
		extendsFrom implementation
	}
}

dependencies {
	implementation "org.eclipse.xtext:org.eclipse.xtext:${versions.xtext}"
	implementation "com.google.code.gson:gson:${versions.gson}"
	implementation "org.jcommander:jcommander:1.83"
	implementation("xerces:xercesImpl:${versions.xerces}") {
		exclude module: "xml-apis"
	}
	
	
	testImplementation "junit:junit:${versions.junit}"
	testImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:${versions.xtext}"

	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:${versions.mwe2}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${versions.xtext}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${versions.xtext}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator:${versions.antlrgen}"
	mwe2 "io.typefox.xtext:jflex-fragment:${versions.jflexgen}"
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/main/java/io/typefox/yang/GenerateYang.mwe2"
	inputs.file "src/main/java/io/typefox/yang/Yang.xtext"
	outputs.dir "src/main/xtext-gen"
	args += "src/main/java/io/typefox/yang/GenerateYang.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

mainClassName = 'io.typefox.yang.processor.YangProcessorApp'
applicationName = 'yang-tool'
ext.applicationQualifier = 'yang-tool'

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]


